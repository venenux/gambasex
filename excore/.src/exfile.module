' Gambas module file

''' modulo de utilidades respecto el sistema de ficheros, requiere `libreoffice` para conversiones, `openoffice` solo para visor

Export

Private commandshelltmp As String   '' variable interna para manejar el comando ejecutado en la rutina invocada
Private outputfunction As String    '' variable interna para resultado del comando ejecutado en la rutina invocada
Public _requisites As String = "df,mount,grep,cut,bash,iconv,file,soffice"

Public Function getMimeEncoding(sFilePath As String, Optional ruta As String = User.Home) As String '' devuelve el tipo de archivo si es texto plano o binario
    
    ' ambito de application.path, es la de excore si se corre desde aqui sino es la de el proyecto que implementa la lib
    If Comp(Trim(ruta), "", gb.IgnoreCase) = 0 Then ruta = Application.Path
    If Comp(Trim(sFilePath), "", gb.IgnoreCase) = 0 Then Return Null
    If InStr(sFilePath, "/", 0, gb.IgnoreCase) = 0 Then sFilePath = ruta &/ sFilePath
    Shell "file --brief --mime-encoding " & sFilePath To outputfunction
    outputfunction = Trim(Upper(outputfunction))
    Return outputfunction
    
End

Public Function getMimeType(sFilePath As String, Optional ruta As String = "") As String '' devuelve el tipo de archivo en forma mime ambito/tipo la ruta debe ser absoluta, sino entonces asume raiz dcel proyecto
    
    If Comp(Trim(ruta), "", gb.IgnoreCase) = 0 Then ruta = Application.Path
    If Comp(Trim(sFilePath), "", gb.IgnoreCase) = 0 Then Return "application/x-empty"
    If InStr(sFilePath, "/", 0, gb.IgnoreCase) = 0 Then sFilePath = ruta &/ sFilePath
    Shell "file --brief --mime-type " & sFilePath To outputfunction
    outputfunction = Trim(outputfunction)
    Return outputfunction
    
End


Public Function getFileDev(Optional ruta As String = "") As String '' devuelve el dispositivo o disco, segun ruta, sino el del sistema de ficheros raiz, si es mapeado no devuelve el dispositivo real, solo el mapa
    
    Dim outputfunction2 As String
    If Comp(Trim(ruta), "", gb.IgnoreCase) = 0 Then ruta = "/"
    Shell "df -h " & ruta & " | cut -d' ' -f1" To outputfunction 'Almacenamos caracteristicas del Sistema de Ficheros pasado en ruta
    Try outputfunction2 = Scan(outputfunction, "*\n*")[1] 'Ocultamos el Error si no encuentra la cadena
    If Error Then outputfunction2 = outputfunction
    Return Replace(outputfunction2, "\n", "")
    
End


Public Function getFileSys(Optional directorio As String = "") As String '' devuelve el sistema de ficheros, segun `directorio`, sino el sistema de ficheros raiz, si no es valido/montado no devuelve nada
    
    If Comp(Trim(directorio), "", gb.IgnoreCase) = 0 Then directorio = "/"
    If Not Exist(Trim(directorio)) Then Return ""
    If Comp(Trim(directorio), "/", gb.IgnoreCase) = 0 Then directorio = "on / "
    Shell "mount | grep \"" & directorio & "\" | cut -d' ' -f5" To outputfunction 'Almacenamos caracteristicas del Sistema de Ficheros pasado en ruta
    Return Replace(outputfunction, "\n", "")
    
End

'' retorna el directorio padre unos `levelparent` arriba del argumento `directorio`, si son muchos niveles devuelve la raiz
Public Function getDirParent(Optional directorio As String = Application.path, Optional levelparent As Integer = 1) As String
    
    ' ambito de application.path, es la de excore si se corre desde aqui sino es la de el proyecto que implementa la lib
    Dim seconslas, atlast, tamanio, removeuntil As Integer = 0
    If Comp(Trim(directorio), "", gb.IgnoreCase) = 0 Then Return Application.Path
    If InStr(directorio, "/") < 1 Then Return Application.Path
    If levelparent = 0 Then
        tamanio = Len(directorio)
        atlast = RInStr(directorio, "/", 0)
        If tamanio = atlast Then directorio = Mid(directorio, 1, -1)
        Return directorio
    Endif
    For removeuntil = 1 To levelparent Step 1
        tamanio = Len(directorio)
        atlast = RInStr(directorio, "/", 0)
        If tamanio = atlast Then directorio = Mid(directorio, 1, -1)
        seconslas = RInStr(directorio, "/", tamanio - 1)
        outputfunction = Mid(directorio, 1, seconslas)
        tamanio = Len(outputfunction)
        atlast = RInStr(outputfunction, "/", 0)
        If tamanio = atlast Then outputfunction = Mid(outputfunction, 1, -1)
        directorio = outputfunction
        If InStr(directorio, "/") < 1 Then Break
    Next
    If Comp(Trim(directorio), "", gb.IgnoreCase) = 0 Then outputfunction = "/"
    Return outputfunction
    
End

'' verifica que un directorio existe dentro de la ruta segun la profundidad padre, ejemplo buscar por encima del directorio padre otros directorios, ejemplo `pepe/log` dentro de `/home/pablo` retorna `/home/pablo/pepe/log` o `False` si no existe \ @See exapp.ambito para ver ambito de application.name
Public Function getDirExist(Optional busca As String = Application.name, Optional directorio As String = Application.Path, Optional levelparent As Integer = 0) As Variant
    
    ' ambito de application.name, es excore si se corre desde aqui sino es elnombre de el proyecto que implementa la lib
    Dim seconslas, atlast, tamanio, removeuntil As Integer = 0
    directorio = getDirParent(directorio, levelparent)
    If Not IsDir(directorio) Then Return False
    ' remocion de ultimo caracter si es "/"
    tamanio = Len(busca)
    atlast = RInStr(busca, "/", 0)
    If tamanio = atlast Then busca = Mid(busca, 1, -1)
    ' remocion de caracteres ".." si no lo sigue un "/" pues lo hace invalido
    atlast = InStr(directorio, "..")
    If atlast > 0 Then
        seconslas = InStr(directorio, "../")
        If atlast <> seconslas Then
            Return False    ' ruta invalida de busqueda ?
        Endif
    Endif
    ' remocion del primer caracter si este es "/" porque sino se verifica de una es el root
    tamanio = Len(busca)
    atlast = InStr(busca, "/", 0)
    If atlast = 1 Then busca = Mid(busca, 2, tamanio)
    ' conctena y busca como una ruta absoluta en el sistema de ficheros de la lib
    directorio = directorio &/ busca
    If Not Exist(directorio) Then Return False
    Return directorio
    
End


Public Sub caltoods(Optional namefile As String = "", Optional pathfile As String = "") As String '' exporta un archivo csv o excel a ods en donde se ejecute el modulo, @return: ruta de donde se guarda el resultado
  
  Dim entorno As String = "/tmp/LibreOffice_Conversion_" & User.Name

  If Comp(Replace(pathfile, " ", "", gb.IgnoreCase), "", gb.IgnoreCase) = 0 Then pathfile = "/tmp/"
  If Comp(Replace(namefile, " ", "", gb.IgnoreCase), "", gb.IgnoreCase) = 0 Then Return Null
  Try Kill pathfile &/ namefile
  commandshelltmp = "soffice -nodefault -nolockcheck -nologo -norestore -convert-to ods:\"OpenDocument Spreadsheet Flat XML\" -env:UserInstallation=file://" & entorno & " -headless -outdir " & pathfile & " " & namefile
  Shell commandshelltmp To outputfunction
  namefile = Mid(namefile, 1, RInStr(namefile, "."))
  namefile = Mid(namefile, RInStr(namefile, "/"), Len(namefile))
  If Exist(pathfile &/ namefile & "ods") Then Return pathfile &/ namefile & "ods"
  Return Null
  
End

