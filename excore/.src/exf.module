' Gambas module file

''' modulo de utilidades respecto el sistema de ficheros, requiere `libreoffice` para conversiones, `openoffice` solo para visor

Export

Private commandshelltmp As String   '' variable interna para manejar el comando ejecutado en la rutina invocada
Private outputfunction As String    '' variable interna para resultado del comando ejecutado en la rutina invocada
Public _requisites As String = "df,mount,grep,cut,bash,iconv,file,soffice"

Public Function CharacterSets() As String[] '' deveulve un arreglo con los tipos de codificaciones soportadas por el sistemaoperativo y su softwareinstalado
    
    Dim sIconvList As String
    Dim aCharacterSets As String[]
    
    Shell "iconv --list" To sIconvList
    sIconvList = Replace$(sIconvList, "//", "")
    aCharacterSets = Split(sIconvList, "\n")
    aCharacterSets.Remove(aCharacterSets.Max, 1)
    Return aCharacterSets
    
End

Public Function getMimeEncoding(sFilePath As String, Optional ruta As String = User.Home) As String '' devuelve el tipo de archivo si es texto plano o binario
    
    If Comp(Trim(ruta), "", gb.IgnoreCase) = 0 Then ruta = Application.Path
    If Comp(Trim(sFilePath), "", gb.IgnoreCase) = 0 Then Return Null
    If InStr(sFilePath, "/", 0, gb.IgnoreCase) = 0 Then sFilePath = ruta &/ sFilePath
    Shell "file --brief --mime-encoding " & sFilePath To outputfunction
    outputfunction = Trim(Upper(outputfunction))
    Return outputfunction
    
End

Public Function getMimeType(sFilePath As String, Optional ruta As String = "") As String '' devuelve el tipo de archivo en forma mime ambito/tipo la ruta debe ser absoluta, sino entonces asume raiz dcel proyecto
    
    If Comp(Trim(ruta), "", gb.IgnoreCase) = 0 Then ruta = Application.Path
    If Comp(Trim(sFilePath), "", gb.IgnoreCase) = 0 Then Return "application/x-empty"
    If InStr(sFilePath, "/", 0, gb.IgnoreCase) = 0 Then sFilePath = ruta &/ sFilePath
    Shell "file --brief --mime-type " & sFilePath To outputfunction
    outputfunction = Trim(outputfunction)
    Return outputfunction
    
End


Public Function getFileDev(Optional ruta As String = "") As String '' devuelve el dispositivo o disco, segun ruta, sino el del sistema de ficheros raiz, si es mapeado no devuelve el dispositivo real, solo el mapa
    
    Dim outputfunction2 As String
    If Comp(Trim(ruta), "", gb.IgnoreCase) = 0 Then ruta = "/"
    Shell "df -h " & ruta & " | cut -d' ' -f1" To outputfunction 'Almacenamos caracteristicas del Sistema de Ficheros pasado en ruta
    Try outputfunction2 = Scan(outputfunction, "*\n*")[1] 'Ocultamos el Error si no encuentra la cadena
    If Error Then outputfunction2 = outputfunction
    Return Replace(outputfunction2, "\n", "")
    
End


Public Function getFileSys(Optional directorio As String = "") As String '' devuelve el sistema de ficheros, segun `directorio`, sino el sistema de ficheros raiz, si no es valido/montado no devuelve nada
    
    If Comp(Trim(directorio), "", gb.IgnoreCase) = 0 Then directorio = "on / "
    If Comp(Trim(directorio), "/", gb.IgnoreCase) = 0 Then directorio = "on / "
    Shell "mount | grep \"" & directorio & "\" | cut -d' ' -f5" To outputfunction 'Almacenamos caracteristicas del Sistema de Ficheros pasado en ruta
    Return Replace(outputfunction, "\n", "")
    
End


Public Sub caltoods(Optional namefile As String = "", Optional pathfile As String = "") As String '' exporta un archivo csv o excel a ods en donde se ejecute el modulo, @return: ruta de donde se guarda el resultado
  
  Dim entorno As String = "/tmp/LibreOffice_Conversion_" & User.Name

  If Comp(Replace(pathfile, " ", "", gb.IgnoreCase), "", gb.IgnoreCase) = 0 Then pathfile = "/tmp/"
  If Comp(Replace(namefile, " ", "", gb.IgnoreCase), "", gb.IgnoreCase) = 0 Then Return Null
  Try Kill pathfile &/ namefile
  commandshelltmp = "soffice -nodefault -nolockcheck -nologo -norestore -convert-to ods:\"OpenDocument Spreadsheet Flat XML\" -env:UserInstallation=file://" & entorno & " -headless -outdir " & pathfile & " " & namefile
  Shell commandshelltmp To outputfunction
  namefile = Mid(namefile, 1, RInStr(namefile, "."))
  namefile = Mid(namefile, RInStr(namefile, "/"), Len(namefile))
  If Exist(pathfile &/ namefile & "ods") Then Return pathfile &/ namefile & "ods"
  Return Null
  
End
