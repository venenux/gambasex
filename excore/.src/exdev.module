' Gambas module file

Public Sub ScanSerialPorts(sPath As String, sFilter As String) As Collection

  Dim sName, sRealName, sById As String
  Dim aPortsById As String[]
  Dim aSerialPorts As String[]
  Dim cSerPort2ById As New Collection
  Dim cResult As New Collection
  Dim sByIdPath As String = "/dev/serial/by-id/"

 #If System.Family = "Linux"
   ' get the serial devices with id's
  cSerPort2ById.Clear()
  Try aPortsById = Dir(sByIdPath)
  If aPortsById Then
    For Each sById In aPortsById
      Exec ["readlink", "-f", sByIdPath &/ sById] To sRealName
      sRealName = Trim(sRealName)
      If Not sRealName Then sRealName = sName
      cSerPort2ById.Add(sById, sRealName)
    Next
  Endif

  ' fill array with available ports according to filter
  Try aSerialPorts = Dir(sPath, sFilter)
  ' only if devices found
  If aSerialPorts Then
    aSerialPorts.Sort
    cResult.Clear
    For Each sRealName In aSerialPorts
      sRealName = sPath &/ sRealName
      If cSerPort2ById.Exist(sRealName) Then
        sById = cSerPort2ById[sRealName]
        cSerPort2ById.Remove(sRealName)
      Else
        sById = "-"
      Endif
      cResult.Add(sById, sRealName)
    Next
  Endif

  ' If there are any devices with id's left, add them still
  For Each cSerPort2ById
    sRealName = cSerPort2ById.Key
    sById = cSerPort2ById[sRealName]
    cResult.Add(sById, sRealName)
  Next

  Return cResult
#Else

    Return Null
#Endif


End